/* tslint:disable */
/* eslint-disable */
/**
 * Makielak API
 * This is a makielak API documentation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentResponse,
  ContentType,
  UpsertContentDto,
} from '../models';
import {
    ContentResponseFromJSON,
    ContentResponseToJSON,
    ContentTypeFromJSON,
    ContentTypeToJSON,
    UpsertContentDtoFromJSON,
    UpsertContentDtoToJSON,
} from '../models';

export interface GetContentByNameRequest {
    name: ContentType;
}

export interface UpsertContentRequest {
    name: ContentType;
    upsertContentDto: UpsertContentDto;
}

/**
 * ContentApi - interface
 * 
 * @export
 * @interface ContentApiInterface
 */
export interface ContentApiInterface {
    /**
     * 
     * @summary Get content by name
     * @param {ContentType} name Content type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    getContentByNameRaw(requestParameters: GetContentByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentResponse>>;

    /**
     * Get content by name
     */
    getContentByName(requestParameters: GetContentByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentResponse>;

    /**
     * 
     * @summary Store a file
     * @param {ContentType} name Content type
     * @param {UpsertContentDto} upsertContentDto Data to upsert content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    upsertContentRaw(requestParameters: UpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentResponse>>;

    /**
     * Store a file
     */
    upsertContent(requestParameters: UpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentResponse>;

}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI implements ContentApiInterface {

    /**
     * Get content by name
     */
    async getContentByNameRaw(requestParameters: GetContentByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getContentByName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/content/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentResponseFromJSON(jsonValue));
    }

    /**
     * Get content by name
     */
    async getContentByName(requestParameters: GetContentByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentResponse> {
        const response = await this.getContentByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store a file
     */
    async upsertContentRaw(requestParameters: UpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling upsertContent.');
        }

        if (requestParameters.upsertContentDto === null || requestParameters.upsertContentDto === undefined) {
            throw new runtime.RequiredError('upsertContentDto','Required parameter requestParameters.upsertContentDto was null or undefined when calling upsertContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/content/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertContentDtoToJSON(requestParameters.upsertContentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentResponseFromJSON(jsonValue));
    }

    /**
     * Store a file
     */
    async upsertContent(requestParameters: UpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentResponse> {
        const response = await this.upsertContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
