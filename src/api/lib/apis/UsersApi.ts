/* tslint:disable */
/* eslint-disable */
/**
 * Makielak API
 * This is a makielak API documentation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDto,
  DeletedUserResponse,
  SignInDto,
  TokenResponse,
  UpdateUserDto,
  UserResponse,
  UsersResponse,
} from '../models';
import {
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    DeletedUserResponseFromJSON,
    DeletedUserResponseToJSON,
    SignInDtoFromJSON,
    SignInDtoToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    UsersResponseFromJSON,
    UsersResponseToJSON,
} from '../models';

export interface CreateUserRequest {
    createUserDto: CreateUserDto;
}

export interface DeleteOneUserRequest {
    id: string;
}

export interface GetUserByIdRequest {
    id: string;
}

export interface SingInRequest {
    signInDto: SignInDto;
}

export interface UpdateOneUserRequest {
    id: string;
    updateUserDto: UpdateUserDto;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * 
     * @summary Creates a user
     * @param {CreateUserDto} createUserDto Data to create a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Creates a user
     */
    createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

    /**
     * 
     * @summary Deletes single user by id
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteOneUserRaw(requestParameters: DeleteOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedUserResponse>>;

    /**
     * Deletes single user by id
     */
    deleteOneUser(requestParameters: DeleteOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedUserResponse>;

    /**
     * 
     * @summary Gets all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse>>;

    /**
     * Gets all users
     */
    getAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse>;

    /**
     * 
     * @summary Get single user by id
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Get single user by id
     */
    getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

    /**
     * 
     * @summary Sign out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    signOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Sign out
     */
    signOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Sign in
     * @param {SignInDto} signInDto Data to sign in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    singInRaw(requestParameters: SingInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * Sign in
     */
    singIn(requestParameters: SingInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse>;

    /**
     * 
     * @summary Updates single user by id
     * @param {string} id User id
     * @param {UpdateUserDto} updateUserDto Data to update a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateOneUserRaw(requestParameters: UpdateOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Updates single user by id
     */
    updateOneUser(requestParameters: UpdateOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Creates a user
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Creates a user
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes single user by id
     */
    async deleteOneUserRaw(requestParameters: DeleteOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOneUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedUserResponseFromJSON(jsonValue));
    }

    /**
     * Deletes single user by id
     */
    async deleteOneUser(requestParameters: DeleteOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedUserResponse> {
        const response = await this.deleteOneUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all users
     */
    async getAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersResponseFromJSON(jsonValue));
    }

    /**
     * Gets all users
     */
    async getAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse> {
        const response = await this.getAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get single user by id
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Get single user by id
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sign out
     */
    async signOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/auth/sign-out`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sign out
     */
    async signOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signOutRaw(initOverrides);
    }

    /**
     * Sign in
     */
    async singInRaw(requestParameters: SingInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters.signInDto === null || requestParameters.signInDto === undefined) {
            throw new runtime.RequiredError('signInDto','Required parameter requestParameters.signInDto was null or undefined when calling singIn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/auth/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInDtoToJSON(requestParameters.signInDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Sign in
     */
    async singIn(requestParameters: SingInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.singInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates single user by id
     */
    async updateOneUserRaw(requestParameters: UpdateOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOneUser.');
        }

        if (requestParameters.updateUserDto === null || requestParameters.updateUserDto === undefined) {
            throw new runtime.RequiredError('updateUserDto','Required parameter requestParameters.updateUserDto was null or undefined when calling updateOneUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters.updateUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Updates single user by id
     */
    async updateOneUser(requestParameters: UpdateOneUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.updateOneUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
