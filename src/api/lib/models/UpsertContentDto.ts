/* tslint:disable */
/* eslint-disable */
/**
 * Makielak API
 * This is a makielak API documentation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpsertContentDto
 */
export interface UpsertContentDto {
    /**
     * 
     * @type {string}
     * @memberof UpsertContentDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertContentDto
     */
    structure: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertContentDto
     */
    name: UpsertContentDtoNameEnum;
}


/**
 * @export
 */
export const UpsertContentDtoNameEnum = {
    HomePage: 'HOME_PAGE',
    AboutUs: 'ABOUT_US',
    Services: 'SERVICES',
    Certificates: 'CERTIFICATES',
    Contact: 'CONTACT',
    Footer: 'FOOTER'
} as const;
export type UpsertContentDtoNameEnum = typeof UpsertContentDtoNameEnum[keyof typeof UpsertContentDtoNameEnum];


/**
 * Check if a given object implements the UpsertContentDto interface.
 */
export function instanceOfUpsertContentDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "structure" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function UpsertContentDtoFromJSON(json: any): UpsertContentDto {
    return UpsertContentDtoFromJSONTyped(json, false);
}

export function UpsertContentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertContentDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'structure': json['structure'],
        'name': json['name'],
    };
}

export function UpsertContentDtoToJSON(value?: UpsertContentDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'structure': value.structure,
        'name': value.name,
    };
}

